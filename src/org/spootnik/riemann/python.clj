(ns org.spootnik.riemann.python
  "Helper functions to work with input from python-riemann-wrapper"
  (:require [riemann.streams :refer [tagged sdo combine project*
                                     where* where by adjust smap]]
            [clojure.string :as s]))

(defn python-stream
  "Given an input stream, catch events generated by a python
   riemann_wrapper"
  [secs & children]
  (where* (comp #{"python"} :tags)
          (by [:host]
              (where* (comp #{"duration"} :tags)
                      (smap (fn [ev#]
                              (assoc ev#
                                :service (str (:prefix ev#) " calls/s")))
                            (with :metric 1 (rate ~secs ~@children))))
              (where* (comp #{"exception"} :tags)
                      (smap (fn [ev#]
                              (assoc ev#
                                :service (str (:prefix ev#) " exceptions/s")))
                            (with :metric 1 (rate ~secs ~@children)))))
          (by [:host :service]
              (where* (comp #{"duration"} :tags)
                      (adjust [:service str " persec"]
                              (with :metric 1 (rate ~secs ~@children))))
              (where* (comp #{"exception"} :tags)
                      (adjust [:service str " persec"]
                              (with :metric 1 (rate ~secs ~@children)))))))